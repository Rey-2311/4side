package com.example.alarm

import android.Manifest
import android.annotation.SuppressLint
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.alarm.ui.theme.AlarmTheme
import androidx.compose.foundation.layout.Box
import androidx.compose.ui.Alignment
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import java.text.SimpleDateFormat
import java.util.*
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.platform.LocalContext
import android.content.Context
import android.service.autofill.OnClickAction
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.offset
import androidx.compose.material3.Button
import androidx.compose.ui.unit.dp
import android.app.TimePickerDialog
import androidx.compose.foundation.layout.Column
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat

class MainActivity : ComponentActivity() {
    @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
    override fun onCreate(savedInstanceState: Bundle?) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) { // Request permission
            requestPermissions(arrayOf(android.Manifest.permission.POST_NOTIFICATIONS), 0)
        }
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            AlarmTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) {
                    Timing()
                }
            }
        }
    }
}

fun showNotification(context: Context, title: String, message: String) {
    val channelId = "alarm_channel"

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val name = "Alarm Channel"
        val descriptionText = "Channel for alarm notifications"
        val importance = NotificationManager.IMPORTANCE_HIGH
        val channel = NotificationChannel(channelId, name, importance).apply {
            description = descriptionText
            setShowBadge(false)
        }
        val notificationManager: NotificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
    }

    val builder = NotificationCompat.Builder(context, channelId)
        .setSmallIcon(android.R.drawable.ic_lock_idle_alarm)
        .setContentTitle(title)
        .setContentText(message)
        .setPriority(NotificationCompat.PRIORITY_HIGH)
        .setCategory(NotificationCompat.CATEGORY_ALARM)
        .setOngoing(true)
        .setAutoCancel(false)


    with(NotificationManagerCompat.from(context)) {
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            return
        }
        notify(1001, builder.build())
    }
}

fun cancelNotification(context: Context) {
    with(NotificationManagerCompat.from(context)) {
        cancel(1001)
    }
}

@Composable
fun Timing() {
    val context = LocalContext.current
    var time by remember { mutableStateOf(getCurrentTime()) }
    var alarmTime by remember { mutableStateOf<String?>(null) }
    var showAlarm by remember { mutableStateOf(false) }
    var visible by remember { mutableStateOf(false) }
    var a by remember { mutableStateOf(30) }
    var offsetX by remember { mutableStateOf(0) }
    var offsetY by remember { mutableStateOf(0) }
    var alarmSet by remember { mutableStateOf(false) }

    val calendar = Calendar.getInstance()
    val hour = calendar.get(Calendar.HOUR_OF_DAY)
    val minute = calendar.get(Calendar.MINUTE)

    val timePickerDialog = TimePickerDialog(
        context,
        { _, selectedHour: Int, selectedMinute: Int ->
            alarmTime = String.format("%02d:%02d:00", selectedHour, selectedMinute)
            alarmSet = true
            showNotification(context, "Alarm Set", "Alarm set for $alarmTime")
        },
        hour, minute, true
    )

    LaunchedEffect(Unit) {
        while (true) {
            time = getCurrentTime()
            if (alarmSet && time == alarmTime) {
                showAlarm = true
                a = 30
                showNotification(context, "Alarm", "Alarm!")
            }
            delay(1000)
        }
    }

    LaunchedEffect(showAlarm) {
        while (showAlarm) {
            visible = (0..1).random() == 1
            offsetX = (10..150).random()
            offsetY = (10..300).random()
            delay(300)
            a -= 1
            if (a == 0) {
                showAlarm = false
                cancelNotification(context)
            }
        }
    }

    Box(
        contentAlignment = Alignment.Center,
        modifier = Modifier.fillMaxSize()
    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text("Current Time: $time", fontSize = 32.sp)

            Button(onClick = { timePickerDialog.show() }) {
                Text("Set Alarm Time")
            }

            alarmTime?.let {
                Text("Alarm set for: $it", fontSize = 16.sp)
            }
        }
    }

    if (showAlarm && visible) {
        PlayAlarm(offsetX, offsetY)
    }
}

@Composable
fun PlayAlarm(offsetX: Int, offsetY: Int) {
    Box(
        modifier = Modifier
            .fillMaxSize()
    ) {
        Text(
            text = "Time is up",
            fontSize = 32.sp,
            modifier = Modifier
                .align(Alignment.TopStart)
                .offset(x = offsetX.dp, y = offsetY.dp)
        )
    }
}

fun getCurrentTime(): String {
    val sdf = SimpleDateFormat("HH:mm:ss", Locale.getDefault())
    return sdf.format(Date())
}
