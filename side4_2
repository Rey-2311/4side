package com.example.bitcoin.network

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Query

data class CoinLayerResponse( //expect output tu CoinLayer
    val success: Boolean,
    val rates: Map<String, Double>
)

interface CoinLayerService {
    @GET("live")
    suspend fun getLiveRates(
        @Query("access_key") accessKey: String,
        @Query("symbols") symbols: String
    ): CoinLayerResponse
}

object CoinLayerClient { //calling
    private const val BASE_URL = "https://api.coinlayer.com/"
    private const val API_KEY = "409e0b62eb42550222f9cd92732e74d6"

    private val service: CoinLayerService by lazy {
        val logging = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BASIC
        }
        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(CoinLayerService::class.java)
    }

    suspend fun fetchPrice(symbol: String): Double = withContext(Dispatchers.IO) {
        val resp = service.getLiveRates(API_KEY, symbol) //get respond
        if (!resp.success) throw Exception("API returned success=false")
        resp.rates[symbol] ?: throw Exception("No rate for $symbol")
    }
}
