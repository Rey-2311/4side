package com.example.quiz

import android.R.bool
import androidx.annotation.DrawableRes
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.runtime.*
import androidx.compose.ui.platform.LocalContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.airbnb.lottie.compose.LottieAnimation
import com.airbnb.lottie.compose.LottieCompositionSpec
import com.airbnb.lottie.compose.animateLottieCompositionAsState
import com.airbnb.lottie.compose.rememberLottieComposition
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.Dp
import com.airbnb.lottie.compose.LottieConstants
import java.nio.file.Files.size

@Composable
fun FuncButton(
    label: String,
    modifier: Modifier = Modifier,
    onClick: () -> Unit
) {
    OutlinedButton(
        onClick = onClick,
        modifier = modifier
            .size(120.dp, 55.dp),
        shape = RoundedCornerShape(8.dp)
    ) {
        Text(label, fontSize = 18.sp)
    }
}


@Composable
fun ResultAnimation(
    visible: Boolean,
    correct: Boolean,
    modifier: Modifier = Modifier
) {
    if (!visible) return

    val rawRes = if (correct) R.raw.correct else R.raw.incorrect

    val composition by rememberLottieComposition(
        spec     = LottieCompositionSpec.RawRes(rawRes),
        cacheKey = rawRes.toString()
    )

    val animState = animateLottieCompositionAsState(
        composition   = composition,
        iterations    = LottieConstants.IterateForever,
        isPlaying     = true,
        restartOnPlay = true
    )

    LottieAnimation(
        composition = composition,
        progress    = { animState.progress },
        modifier    = modifier
    )
}

@Composable
fun CircleImageButton(
    @DrawableRes resId: Int,
    size: Dp = 100.dp,
    borderWidth: Dp = 8.dp,
    borderColor: Color = Color.Gray,
    onClick: () -> Unit
) {
    Surface(
        modifier = Modifier
            .size(size + borderWidth * 2)
            .clickable(onClick = onClick),
        shape = CircleShape,
        border = BorderStroke(borderWidth, borderColor),
        color = Color.Transparent
    ) {
        Box(contentAlignment = Alignment.Center, modifier = Modifier.fillMaxSize()) {
            Image(
                painter = painterResource(resId),
                contentDescription = null,
                modifier = Modifier
                    .size(size)
                    .clip(CircleShape)
            )
        }
    }
}






