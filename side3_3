package com.example.quiz.utils

import android.content.Context
import android.util.Log
import com.example.quiz.R
import kotlinx.serialization.*
import kotlinx.serialization.json.*
import java.io.File

@Serializable
data class Question(
    val number: Int,
    var text: String,
    var correctAnswer: Int
)

@Serializable
data class QuizSet(
    val id: Int,
    val questions: List<Question>
)

suspend fun mergeAiQuestionsIntoJson(
    context: Context,
    aiJson: String
) {
    var cleanJson = aiJson.trim()
    if (cleanJson.startsWith("```")) {
        cleanJson = cleanJson
            .removePrefix("```json")
            .removePrefix("```")
            .removeSuffix("```")
            .trim()
    }
    Log.d("QuizJsonUtils", "AI JSON received:\n$cleanJson")

    val json = Json { prettyPrint = true }

    val aiSet = json.decodeFromString<QuizSet>(cleanJson)

    val file = File(context.filesDir, "questions.json")
    val existingJson = if (file.exists()) {
        file.readText()
    } else {
        context.resources.openRawResource(R.raw.questions)
            .bufferedReader()
            .use { it.readText() }
    }
    val allSets = json.decodeFromString<List<QuizSet>>(existingJson).toMutableList()

    val idx = allSets.indexOfFirst { it.id == aiSet.id }
    if (idx >= 0) {
        allSets[idx] = aiSet
        Log.d("QuizJsonUtils", "Replaced existing QuizSet id=${aiSet.id}")
    } else {
        allSets.add(aiSet)
        Log.d("QuizJsonUtils", "Added new QuizSet id=${aiSet.id}")
    }
    Log.d("QuizJsonUtils", "Total QuizSets after merge: ${allSets.size}")

    file.writeText(json.encodeToString(allSets))
    Log.d("QuizJsonUtils", "questions.json successfully written to ${file.absolutePath}")
}
