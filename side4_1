package com.example.bitcoin

import android.content.res.Configuration
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.example.bitcoin.network.CoinLayerClient
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import androidx.compose.runtime.*
import com.airbnb.lottie.compose.*
import okhttp3.OkHttpClient
import okhttp3.Request
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.double
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive
import android.graphics.Paint
import android.graphics.Color as AndroidColor

import androidx.compose.foundation.Image
import androidx.compose.ui.graphics.nativeCanvas
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    LivePriceAndPredictionScreen(symbol = "BTC")
                }
            }
        }
    }
}

@Composable
fun LivePriceAndPredictionScreen(
    symbol: String,
    refreshIntervalMs: Long = 30_000L
) {
    val history = remember { mutableStateListOf<Double>() }
    var latestPrice by remember { mutableStateOf<Double?>(null) }
    var lastPrice by remember { mutableStateOf<Double?>(null) }
    var loading by remember { mutableStateOf(false) }

    // detect orientation
    val configuration = LocalConfiguration.current
    val isLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE
    val animationRes by remember {
        derivedStateOf {
            when {
                lastPrice == null || latestPrice == null -> R.raw.increase_ani
                latestPrice!! > lastPrice!!               -> R.raw.increase_ani
                latestPrice!! < lastPrice!!               -> R.raw.decrease_ani
                else                                      -> R.raw.increase_ani
            }
        }
    }
    val composition by rememberLottieComposition(LottieCompositionSpec.RawRes(animationRes))
    val progress by animateLottieCompositionAsState(composition, iterations = LottieConstants.IterateForever)

    LaunchedEffect(symbol) {
        val initial = runCatching { fetchLast7DaysPricesCoingecko() }.getOrNull()
        initial?.let {
            history.clear()
            history.addAll(it)
            latestPrice = it.lastOrNull()
            lastPrice   = latestPrice
        }

        while (true) {
            loading = true
            runCatching {
                val price = withContext(Dispatchers.IO) {
                    CoinLayerClient.fetchPrice(symbol)
                }
                lastPrice = latestPrice
                latestPrice = price

            }
            loading = false
            delay(refreshIntervalMs)
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp),
            modifier = Modifier.fillMaxWidth()
        ) {

            Image(
                painter = painterResource(R.drawable.btc_logo),
                contentDescription = "$symbol logo",
                modifier = Modifier.size(48.dp)
            )

            latestPrice?.let { price ->
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text("Price: %.2f USD".format(price))
                    Spacer(modifier = Modifier.width(8.dp))
                    LottieAnimation(composition, progress, modifier = Modifier.size(32.dp))
                }
            }


            if (loading) {
                CircularProgressIndicator()
            }

            if (history.size >= 7) {
                LineChart(
                    data = history.takeLast(7).map { it.toFloat() },
                    modifier = if (isLandscape) {
                        Modifier
                            .fillMaxWidth(0.9f)
                            .height(120.dp)
                    } else {
                        Modifier
                            .width(300.dp)
                            .height(80.dp)
                    }
                )
            }
        }
    }
}

@Composable
fun LineChart(
    data: List<Float>,
    modifier: Modifier = Modifier,
    lineWidth: Dp = 2.dp,
    pointRadius: Dp = 4.dp,
    axisColor: Color = Color.LightGray,
    paddingFraction: Float = 0.1f
) {
    if (data.isEmpty()) return
    Canvas(modifier = modifier) {
        val w = size.width
        val h = size.height
        val maxV = data.maxOrNull() ?: 0f
        val minV = data.minOrNull() ?: 0f
        val range = (maxV - minV).takeIf { it > 0f } ?: 1f
        val pad = range * paddingFraction
        val paddedMax = maxV + pad
        val paddedMin = minV - pad
        val paddedRange = paddedMax - paddedMin
        drawLine(
            color = axisColor,
            start = Offset(0f, h),
            end = Offset(w, h),
            strokeWidth = 1f
        )
        drawLine(
            color = axisColor,
            start = Offset(0f, 0f),
            end = Offset(0f, h),
            strokeWidth = 1f
        )

        val points = data.mapIndexed { i, v ->
            val x = i * (w / (data.size - 1))
            val y = h - ((v - paddedMin) / paddedRange) * h
            Offset(x, y)
        }

        for (i in 0 until points.size - 1) {
            drawLine(
                color       = Color.Blue,
                start       = points[i],
                end         = points[i + 1],
                strokeWidth = lineWidth.toPx()
            )
        }

        points.forEach { pt -> drawCircle(Color.Blue, pointRadius.toPx(), center = pt) }

        val paint = Paint().apply {
            color = android.graphics.Color.BLACK
            textSize = 24f
            isAntiAlias = true
        }
        val maxIndex = data.indexOf(maxV)
        val minIndex = data.indexOf(minV)
        val maxOffset = points.getOrNull(maxIndex)
        val minOffset = points.getOrNull(minIndex)
        maxOffset?.let { off ->
            drawContext.canvas.nativeCanvas.drawText(
                "%.0f".format(maxV), off.x, off.y - 8f, paint
            )
        }
        minOffset?.let { off ->
            drawContext.canvas.nativeCanvas.drawText(
                "%.0f".format(minV), off.x, off.y + 24f, paint
            )
        }
    }
}

suspend fun fetchLast7DaysPricesCoingecko(): List<Double> =
    withContext(Dispatchers.IO) {
        val client = OkHttpClient()
        val url =
            "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart" +
                    "?vs_currency=usd&days=7&interval=daily"
        val request = Request.Builder().url(url).get().build()

        client.newCall(request).execute().use { resp ->
            if (!resp.isSuccessful) throw Exception("CoinGecko HTTP ${resp.code}")
            val body = resp.body!!.string()
            val root = Json.parseToJsonElement(body).jsonObject
            root["prices"]!!.jsonArray.map { it.jsonArray[1].jsonPrimitive.double }
        }
    }
