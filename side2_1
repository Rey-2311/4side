package com.example.quiz

import android.annotation.SuppressLint
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.quiz.ui.theme.QuizTheme

class MainActivity : ComponentActivity() {
    @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            QuizTheme {
                Scaffold(
                    modifier = Modifier.fillMaxSize()
                ) {
                    Quiz()
                }
            }
        }
    }
}

@Composable
fun FuncButton(label: String, onClick: () -> Unit) {
    OutlinedButton(
        onClick = onClick,
        modifier = Modifier
            .size(width = 120.dp, height = 55.dp),
        shape = RoundedCornerShape(8.dp)
    ) {
        Text(label, fontSize = 18.sp)
    }
}

@Composable
fun Quiz() {
    var visible by remember { mutableStateOf(false) }
    var correct by remember { mutableStateOf(true) }
    var questionCounter by remember {mutableStateOf(0)}


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        if (questionCounter == 1)
        {
            Text(
                text = "Question 1: ",
                fontSize = 20.sp,
                modifier = Modifier.padding(bottom = 24.dp)
            )
        }
        else if (questionCounter == 2)
        {
            Text(
                text = "Question 2: ",
                fontSize = 20.sp,
                modifier = Modifier.padding(bottom = 24.dp)
            )
        }

        
        Row(
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            FuncButton(label = "Yes", onClick = { correct = true
            visible = true})
            FuncButton(label = "No", onClick = { correct = false
            visible = true})
            FuncButton(label = "Next ->", onClick = {visible = false
            questionCounter += 1})
            FuncButton(label = "<- Previous>", onClick = {visible = false
            questionCounter -= 1})
        }

        if (!visible)
        {
            Text(
                text = "",
                fontSize = 20.sp,
                modifier = Modifier.padding(top = 24.dp)
            )
        }
        else if (visible)
        {
            if (correct)
            {
                Text(
                    text = "Correct!",
                    fontSize = 20.sp,
                    modifier = Modifier.padding(top = 24.dp)
                )
            }

            if (!correct)
            {
                Text(
                    text = "Wrong!",
                    fontSize = 20.sp,
                    modifier = Modifier.padding(top = 24.dp)
                )
            }
        }

    }
}
